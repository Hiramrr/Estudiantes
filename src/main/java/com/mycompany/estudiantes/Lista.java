/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.estudiantes;

import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 * Clase que muestra la lista de alumnos en una tabla, con la opci√≥n de ordenarlos por matricula, nombre, edad y por el orden de agregamiento
 * @author hiram,michell,jorge
 */
public class Lista extends javax.swing.JFrame implements ActionListener {
    Queue<Alumno> colaAlumnos = new LinkedList<>();
    Queue<Alumno> aux = new LinkedList<>();
    String[] titulo = new String[]{"Matricula","Nombre","Edad"};
    DefaultTableModel dtm = new DefaultTableModel(titulo, 0) {
    @Override
    public boolean isCellEditable(int row, int column) {
        return false;
        }
    };
    /**
     * Creates new form Lista
     */
    public Lista() {
        initComponents();
        dtm.setColumnIdentifiers(titulo);
        datos.setModel(dtm);
        setIconImage(new ImageIcon("sus.jpg").getImage());
        colaAlumnos = leerArchivo();
        llenarTabla();
        this.setTitle("Lista de alumnos");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ordenadoMatricula = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        ordenadoNombre = new javax.swing.JButton();
        ordenadoEdad = new javax.swing.JButton();
        ordenadoAgregamiento = new javax.swing.JButton();
        historicoAcceso = new javax.swing.JButton();
        contenido = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        datos = new javax.swing.JTable();
        home = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setMinimumSize(new java.awt.Dimension(745, 780));
        setPreferredSize(new java.awt.Dimension(745, 780));

        jPanel1.setBackground(new java.awt.Color(17, 23, 30));
        jPanel1.setMinimumSize(new java.awt.Dimension(728, 765));

        jPanel2.setBackground(new java.awt.Color(22, 26, 33));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/oye.jpg"))); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/oye.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Estudiantes- Lista");

        ordenadoMatricula.setBackground(new java.awt.Color(30, 112, 235));
        ordenadoMatricula.setForeground(new java.awt.Color(255, 255, 255));
        ordenadoMatricula.setText("Matricula");
        ordenadoMatricula.addActionListener(this);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Ordenar por:");

        ordenadoNombre.setBackground(new java.awt.Color(30, 112, 235));
        ordenadoNombre.setForeground(new java.awt.Color(255, 255, 255));
        ordenadoNombre.setText("Nombre");
        ordenadoNombre.addActionListener(this);

        ordenadoEdad.setBackground(new java.awt.Color(30, 112, 235));
        ordenadoEdad.setForeground(new java.awt.Color(255, 255, 255));
        ordenadoEdad.setText("Edad");
        ordenadoEdad.addActionListener(this);

        ordenadoAgregamiento.setBackground(new java.awt.Color(30, 112, 235));
        ordenadoAgregamiento.setForeground(new java.awt.Color(255, 255, 255));
        ordenadoAgregamiento.setText("Orden de agregamiento");
        ordenadoAgregamiento.addActionListener(this);

        historicoAcceso.setBackground(new java.awt.Color(30, 112, 235));
        historicoAcceso.setForeground(new java.awt.Color(255, 255, 255));
        historicoAcceso.setText("Historico");
        historicoAcceso.addActionListener(this);

        contenido.setMinimumSize(new java.awt.Dimension(456, 406));
        contenido.setPreferredSize(new java.awt.Dimension(456, 406));

        datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Matricula", "Nombre", "Edad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(datos);

        javax.swing.GroupLayout contenidoLayout = new javax.swing.GroupLayout(contenido);
        contenido.setLayout(contenidoLayout);
        contenidoLayout.setHorizontalGroup(
            contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
        );
        contenidoLayout.setVerticalGroup(
            contenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        home.setBackground(new java.awt.Color(13, 17, 23));
        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Home.png"))); // NOI18N
        home.setBorder(null);
        home.setMaximumSize(new java.awt.Dimension(67, 67));
        home.setMinimumSize(new java.awt.Dimension(67, 67));
        home.setPreferredSize(new java.awt.Dimension(67, 67));
        home.addActionListener(this);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(historicoAcceso, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ordenadoMatricula, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                        .addGap(36, 36, 36)
                        .addComponent(ordenadoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(ordenadoEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(ordenadoAgregamiento))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(contenido, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(70, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordenadoMatricula)
                    .addComponent(ordenadoNombre)
                    .addComponent(ordenadoEdad)
                    .addComponent(ordenadoAgregamiento))
                .addGap(15, 15, 15)
                .addComponent(historicoAcceso)
                .addGap(28, 28, 28)
                .addComponent(contenido, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Lista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contenido;
    private javax.swing.JTable datos;
    private javax.swing.JButton historicoAcceso;
    private javax.swing.JButton home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton ordenadoAgregamiento;
    private javax.swing.JButton ordenadoEdad;
    private javax.swing.JButton ordenadoMatricula;
    private javax.swing.JButton ordenadoNombre;
    // End of variables declaration//GEN-END:variables

    /**
     * Guarda un historico de las acciones realizadas por el usuario
     * @param accion de tipo String
     */
    public void historico(String accion){
        try{
            BufferedWriter datos = new BufferedWriter(new FileWriter("Historico.txt",true));
            datos.write(accion + "\n");
            datos.close();
        } catch (IOException e) {
            System.out.println("Error al guardar historico");
        }
    }
    /**
     * Guarda los datos de alumnos en un archivo "RegistroAlumnos.txt", de no
     * existir el archivo lo crea, y si existe lo remplaza con informaci√≥n nueva
     * @throws java.io.IOException
     */
    public static Queue<Alumno> leerArchivo() {
        Queue<Alumno> colaAlumnos = new LinkedList<Alumno>();
        try (BufferedReader reader = new BufferedReader(new FileReader("RegistroAlumnos.txt"))) {
            String linea;
            while ((linea = reader.readLine()) != null) {
                String[] partes = linea.split(",");
                if (partes.length == 3) {
                    Alumno alumno = new Alumno(partes[0], partes[1], Integer.parseInt(partes[2]));
                    colaAlumnos.add(alumno);
                    System.out.println("Matricula: " + partes[0]);
                }
            }
        } catch (IOException e) {
            System.err.println("No se pudo leer el archivo: RegistroAlumnos.txt");
        }
        return colaAlumnos;
    }
    /**
     * Llena la tabla con los datos de los alumnos
     */
    public void llenarTabla() {
        while (!colaAlumnos.isEmpty()) {
            Alumno a = colaAlumnos.poll();
            String matricula = a.getMatricula();
            String nombre = a.getNombre();
            int edad = a.getEdad();
            dtm.addRow(new Object[]{matricula, nombre, edad});
            aux.add(a);
        }
        while(!aux.isEmpty()){
            colaAlumnos.add(aux.poll());
        }
    }

    /**
     * Ordena los alumnos por matricula
     * utilizando el algoritmo de ordenamiento por inserci√≥n
     * @param colaAlumnos
     */
    public void porMatricula(Queue<Alumno> colaAlumnos){
        borrarTodo();
        ArrayList<Alumno> Alumnos = new ArrayList<Alumno>();
        while(!colaAlumnos.isEmpty()){
            Alumno a = colaAlumnos.poll();
            Alumnos.add(a);
            aux.add(a);
        }
        while(!aux.isEmpty()){
            colaAlumnos.add(aux.poll());
        }
        for (int i = 1; i < Alumnos.size(); i++) {
            Alumno auxiliar = Alumnos.get(i);
            int index = Integer.parseInt(auxiliar.getMatricula());
            int j = i;
            while (j > 0 && Integer.parseInt(Alumnos.get(j - 1).getMatricula()) > index) {
                Alumnos.set(j, Alumnos.get(j - 1));
                j--;
            }
            Alumnos.set(j, auxiliar);
        }
        actualizarTabla(Alumnos);
        datos.repaint();
        datos.revalidate();
    }

    /**
     *Ordena los alumnos por nombre
     * utilizando el algoritmo de ordenamiento de burbuja
     * @param colaAlumnos
     */
    public void porNombre(Queue<Alumno> colaAlumnos){
        borrarTodo();
        ArrayList<Alumno> Alumnos = new ArrayList<Alumno>();
        while(!colaAlumnos.isEmpty()){
            Alumno a = colaAlumnos.poll();
            Alumnos.add(a);
            aux.add(a);
        }
        while(!aux.isEmpty()){
            colaAlumnos.add(aux.poll());
        }
        for (int i = Alumnos.size() - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (Alumnos.get(j).getNombre().compareTo(Alumnos.get(j + 1).getNombre()) > 0) {
                    Alumno temp = Alumnos.get(j);
                    Alumnos.set(j, Alumnos.get(j + 1));
                    Alumnos.set(j + 1, temp);
                }
            }
        }
        actualizarTabla(Alumnos);
        datos.repaint();
        datos.revalidate();
    }

    /**
     * Ordena los alumnos por edad
     * utilizando el algoritmo de ordenamiento de selecci√≥n
     * @param colaAlumnos
     */
    public void porEdad(Queue<Alumno> colaAlumnos){
        borrarTodo();
        ArrayList<Alumno> Alumnos = new ArrayList<Alumno>();
        while(!colaAlumnos.isEmpty()){
            Alumno a = colaAlumnos.poll();
            Alumnos.add(a);
            aux.add(a);
        }
        while(!aux.isEmpty()){
            colaAlumnos.add(aux.poll());
        }
        for(int i = 0; i< Alumnos.size();i++){
            int min = i;
            for(int j = i + 1; j < Alumnos.size(); j++){
                if(Alumnos.get(j).getEdad() < Alumnos.get(min).getEdad()){
                    min = j;
                }
                Alumno temp = Alumnos.get(i);
                Alumnos.set(i,Alumnos.get(min));
                Alumnos.set(min, temp);
            }
        }
        actualizarTabla(Alumnos);
        datos.repaint();
        datos.revalidate();
    }

    /**
     * Actualiza la tabla con los datos de los alumnos
     * @param Alumnos
     */
    public void actualizarTabla(ArrayList<Alumno> Alumnos){
        for(int i=0; i<Alumnos.size(); i++){
            Alumno alumno = Alumnos.get(i);
            String matricula = alumno.getMatricula();
            String nombre = alumno.getNombre();
            int edad = alumno.getEdad();
            dtm.addRow(new Object[]{matricula, nombre, edad});
        }
    }

    /**
     * Borra todos los datos de la tabla
     */
    public void borrarTodo() {
        dtm.setRowCount(0);
    }

    /**
     * M√©todo que permite obtener el icono de la ventana
     * @param evt el evento de la ventana
     */
    @Override
    public void actionPerformed(ActionEvent evt) {
        if(evt.getSource() == ordenadoMatricula){
            porMatricula(colaAlumnos);
            historico("Se han ordenado los alumnos por Matricula");
        }
        else if(evt.getSource() == ordenadoNombre){
            porNombre(colaAlumnos);
            historico("Se han ordenado los alumnos por Nombre");
        }
        else if(evt.getSource() == ordenadoEdad){
            porEdad(colaAlumnos);
            historico("Se han ordenado los alumnos por Edad");
        }
        else if(evt.getSource() == ordenadoAgregamiento){
            borrarTodo();
            llenarTabla();
            datos.repaint();
            datos.revalidate();
            historico("Se han ordenado los alumnos por el orden de agregaci√≥n");
        }
        else if(evt.getSource() == historicoAcceso){
                    historico("Se accedio al historico del programa");
                    Historico his = new Historico();
                    his.setLocation(0,0);
                    his.setSize(604, 449);
                    his.llenarTexto();
            
                    contenido.removeAll();
                    contenido.add(his,BorderLayout.CENTER);
                    contenido.revalidate();
                    contenido.repaint();
        } else if(evt.getSource() == home){
                    this.dispose();
                    Principal principal = new Principal();
                    principal.setVisible(true);
        }
    }
    
    
}
